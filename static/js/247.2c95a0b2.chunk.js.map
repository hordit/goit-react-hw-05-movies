{"version":3,"file":"static/js/247.2c95a0b2.chunk.js","mappings":"6PAiEA,UAzDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACXV,EADW,wDAEhBI,GAAU,GAFM,mBAIKO,EAAAA,EAAAA,IAAgBX,EAAS,YAJ9B,OAIRY,EAJQ,OAKdJ,EAAQI,EAAKL,MALC,kDAOdD,EAASO,EAAAA,IAPK,yBASdT,GAAU,GATI,6EAAH,qDAYfM,GACD,GAAE,CAACV,KAGF,gCACGG,IAAU,SAAC,IAAD,KACN,OAAJI,QAAI,IAAJA,OAAA,EAAAA,EAAMO,QAAS,IACd,4BACE,wBAAI,UACJ,+BACGP,QADH,IACGA,OADH,EACGA,EAAMQ,KAAI,SAAAC,GACT,IAAQC,EAA6CD,EAA7CC,UAAWC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UACjCC,EAASH,EAAY,UACpBI,EAAAA,IADoB,OACPJ,GAChBK,EACJ,OACE,2BACE,gBAAKC,IAAKH,EAAQI,IAAKN,KACvB,uBAAIA,KACJ,uBAAIC,MAHGH,EAMZ,SAINV,EAAKO,OAAS,IACb,uBAAG,qDAEJT,IAAS,yBAAMA,MAGrB,C,4JClDDqB,EAAAA,EAAAA,SAAAA,QAAyBC,EAAAA,GAElB,IAAMC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAUG,EAAAA,GAAmB,CAClDC,OAAQ,CACNC,QAASC,EAAAA,MAHY,cACnBC,EADmB,yBAMlBA,EAASrB,MANS,2CAAH,qDASXsB,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,uFACPV,EAAAA,EAAAA,IAAUW,EAAAA,GAAwB,CACvDP,OAAQ,CACNC,QAASC,EAAAA,GACTG,MAAOA,EACPC,KAAMA,KALoB,cACxBH,EADwB,yBAQvBA,EAASrB,MARc,2CAAH,wDAWhBD,EAAe,mCAAG,WAAOX,EAASsC,GAAhB,uFACNZ,EAAAA,EAAAA,IAAA,UAAaa,EAAAA,GAAb,YAA+BvC,GAA/B,OAAyCsC,GAAW,CACzER,OAAQ,CACNC,QAASC,EAAAA,MAHgB,cACvBC,EADuB,yBAMtBA,EAASrB,MANa,2CAAH,uD,wMC/BrB,IAAMe,EAAW,+BACXK,EAAU,mCACVH,EAAoB,sBACpBQ,EAAyB,gBACzBE,EAAiB,SACjBjB,EAAa,mCACbT,EAAiB,qD","sources":["components/Cast/Cast.jsx","services/api.jsx","services/constants.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport noPoster from '../../image/no-poster.jpg';\nimport { useState, useEffect } from 'react';\nimport { getMovieDetails } from 'services/api';\nimport { HTTP_ERROR_MSG, POSTER_URL } from 'services/constants';\nimport Loader from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [loging, setLoging] = useState(false);\n  const [error, setError] = useState('');\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      if (!movieId) return;\n      setLoging(true);\n      try {\n        const data = await getMovieDetails(movieId, '/credits');\n        setCast(data.cast);\n      } catch (error) {\n        setError(HTTP_ERROR_MSG);\n      } finally {\n        setLoging(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loging && <Loader />}\n      {cast?.length > 0 && (\n        <div>\n          <h2>Cast</h2>\n          <ul>\n            {cast?.map(castData => {\n              const { credit_id, profile_path, name, character } = castData;\n              const poster = profile_path\n                ? `${POSTER_URL}${profile_path}`\n                : noPoster;\n              return (\n                <li key={credit_id}>\n                  <img src={poster} alt={name} />\n                  <p>{name}</p>\n                  <p>{character}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n      {cast.length < 1 && (\n        <p>Apologies, but no cast information is available.</p>\n      )}\n      {error && <div>{error}</div>}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport {\n  BASE_URL,\n  API_KEY,\n  TRENDING_ENDPOINT,\n  SEARCH_MOVIES_ENDPOINT,\n  MOVIE_ENDPOINT,\n} from './constants';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(TRENDING_ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMoviesByQuery = async (query, page) => {\n  const response = await axios.get(SEARCH_MOVIES_ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: page,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, details) => {\n  const response = await axios.get(`${MOVIE_ENDPOINT}/${movieId}${details}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '7d691cb5b3405ae4ec9a5d6e389d01f2';\nexport const TRENDING_ENDPOINT = '/trending/movie/day';\nexport const SEARCH_MOVIES_ENDPOINT = '/search/movie';\nexport const MOVIE_ENDPOINT = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const HTTP_ERROR_MSG = 'Oops! Something went wrong! Try reloading the page!';\n"],"names":["movieId","useParams","useState","loging","setLoging","error","setError","cast","setCast","useEffect","fetchCast","getMovieDetails","data","HTTP_ERROR_MSG","length","map","castData","credit_id","profile_path","name","character","poster","POSTER_URL","noPoster","src","alt","axios","BASE_URL","getTrending","TRENDING_ENDPOINT","params","api_key","API_KEY","response","getMoviesByQuery","query","page","SEARCH_MOVIES_ENDPOINT","details","MOVIE_ENDPOINT"],"sourceRoot":""}