{"version":3,"file":"static/js/415.de38a80c.chunk.js","mappings":"uKACO,I,wCCsBP,EApB4B,SAACA,GAC3B,OAAOA,EAAKC,KAAI,YAOT,IANLC,EAMI,EANJA,GACAC,EAKI,EALJA,MACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,cACAC,EACI,EADJA,YAKA,MAAO,CACLL,GAAAA,EACAM,WALiBH,GAAQF,GAASG,GAAiBF,EAMnDK,OALaF,EAAW,UAAMG,EAAAA,IAAN,OAAmBH,GAAgBI,EAO9D,GACF,E,SCgBD,EAhCkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACXd,EAAOe,EAAoBH,GAEjC,OACE,wBACGZ,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIM,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,OAAnB,OACR,yBACE,SAAC,KAAD,CAAMO,GAAE,kBAAad,GAAMe,MAAO,CAAEC,KAAML,GAA1C,UACE,4BACE,gBAAKM,IAAKV,EAAQW,IAAKZ,KACvB,0BACE,wBAAKA,YFED,eAACa,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvB,EAAIwB,GAWvD,OARExB,IAFFwB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CEPHG,GADD,KAcf,C,mICmBD,UAtCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOlB,EAAP,KAAemB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAEjBC,EAAmB,mCAAG,2FAC1BN,GAAW,GADe,mBAGLO,EAAAA,EAAAA,IAAY,CAC7BC,OAAQJ,EAAWI,SAJG,OAGlBzC,EAHkB,OAMxB+B,EAAU/B,EAAK0C,SANS,gDAQxBP,EAASQ,EAAAA,IARe,yBAUxBV,GAAW,GAVa,4EAAH,qDAezB,OAFAM,IAEO,WACLF,EAAWO,OACZ,CACF,GAAE,KAGD,4BACGZ,IAAW,SAAC,IAAD,KACZ,wBAAI,oBACJ,SAAC,IAAD,CAAWpB,OAAQA,IAClBsB,IAAS,yBAAMA,MAGrB,C,4JCjCDW,EAAAA,EAAAA,SAAAA,QAAyBC,EAAAA,GAElB,IAAMN,EAAW,mCAAG,oGACFK,EAAAA,EAAAA,IAAUE,EAAAA,GAAmB,CAClDC,OAAQ,CACNC,QAASC,EAAAA,MAHY,cACnBC,EADmB,yBAMlBA,EAASnD,MANS,2CAAH,qDASXoD,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,uFACPT,EAAAA,EAAAA,IAAUU,EAAAA,GAAwB,CACvDP,OAAQ,CACNC,QAASC,EAAAA,GACTG,MAAOA,EACPC,KAAMA,KALoB,cACxBH,EADwB,yBAQvBA,EAASnD,MARc,2CAAH,wDAWhBwD,EAAe,mCAAG,WAAOC,EAASC,GAAhB,uFACNb,EAAAA,EAAAA,IAAA,UAAac,EAAAA,GAAb,YAA+BF,GAA/B,OAAyCC,GAAW,CACzEV,OAAQ,CACNC,QAASC,EAAAA,MAHgB,cACvBC,EADuB,yBAMtBA,EAASnD,MANa,2CAAH,uD,wMC/BrB,IAAM8C,EAAW,+BACXI,EAAU,mCACVH,EAAoB,sBACpBQ,EAAyB,gBACzBI,EAAiB,SACjBjD,EAAa,mCACbiC,EAAiB,qD","sources":["../node_modules/nanoid/index.browser.js","services/normalizedDataMovies.jsx","components/MovieList/MovieList.jsx","pages/Home.jsx","services/api.jsx","services/constants.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import noPoster from '../image/no-poster.jpg';\nimport { POSTER_URL } from './constants';\n\nconst normalizeMoviesData = (data) => {\n  return data.map(({\n    id,\n    title,\n    original_title,\n    name,\n    original_name,\n    poster_path\n  }) => {\n    const movieTitle = name || title || original_name || original_title;\n    const poster = poster_path ? `${POSTER_URL}${poster_path}` : noPoster;\n\n    return {\n      id,\n      movieTitle,\n      poster\n    };\n  });\n};\n\nexport default normalizeMoviesData;\n","import { nanoid } from 'nanoid';\nimport { Link, useLocation } from 'react-router-dom';\nimport normalizeMoviesData from 'services/normalizedDataMovies';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  const data = normalizeMoviesData(movies);\n\n  return (\n    <ul>\n      {data.map(({ id, movieTitle, poster }) => (\n        <li key={nanoid()}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <div>\n              <img src={poster} alt={movieTitle} />\n              <div>\n                <h3>{movieTitle}</h3>\n              </div>\n            </div>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      movieTitle: PropTypes.string,\n      poster: PropTypes.string,\n    }),\n  ).isRequired\n};\n\nexport default MovieList;\n","import Loader from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useState, useEffect } from 'react';\nimport { getTrending } from 'services/api';\nimport { HTTP_ERROR_MSG } from 'services/constants';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchTrendingMovies = async () => {\n      setLoading(true);\n      try {\n        const data = await getTrending({\n          signal: controller.signal,\n        });\n        setMovies(data.results);\n      } catch (error) {\n        setError(HTTP_ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTrendingMovies();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return (\n    <main>\n      {loading && <Loader />}\n      <h1>Trending today</h1>\n      <MovieList movies={movies} />\n      {error && <div>{error}</div>}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport {\n  BASE_URL,\n  API_KEY,\n  TRENDING_ENDPOINT,\n  SEARCH_MOVIES_ENDPOINT,\n  MOVIE_ENDPOINT,\n} from './constants';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(TRENDING_ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMoviesByQuery = async (query, page) => {\n  const response = await axios.get(SEARCH_MOVIES_ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: page,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, details) => {\n  const response = await axios.get(`${MOVIE_ENDPOINT}/${movieId}${details}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '7d691cb5b3405ae4ec9a5d6e389d01f2';\nexport const TRENDING_ENDPOINT = '/trending/movie/day';\nexport const SEARCH_MOVIES_ENDPOINT = '/search/movie';\nexport const MOVIE_ENDPOINT = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const HTTP_ERROR_MSG = 'Oops! Something went wrong! Try reloading the page!';\n"],"names":["data","map","id","title","original_title","name","original_name","poster_path","movieTitle","poster","POSTER_URL","noPoster","movies","location","useLocation","normalizeMoviesData","to","state","from","src","alt","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","useState","setMovies","loading","setLoading","error","setError","useEffect","controller","AbortController","fetchTrendingMovies","getTrending","signal","results","HTTP_ERROR_MSG","abort","axios","BASE_URL","TRENDING_ENDPOINT","params","api_key","API_KEY","response","getMoviesByQuery","query","page","SEARCH_MOVIES_ENDPOINT","getMovieDetails","movieId","details","MOVIE_ENDPOINT"],"sourceRoot":""}