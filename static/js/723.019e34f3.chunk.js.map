{"version":3,"file":"static/js/723.019e34f3.chunk.js","mappings":"6SAEaA,EAAcC,EAAAA,GAAAA,GAAH,mEACX,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,IAIDC,EAASL,EAAAA,GAAAA,GAAH,oIAMNM,EAASN,EAAAA,GAAAA,GAAH,qVAMN,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,IACS,SAAAH,GAAC,OAAIA,EAAEC,MAAMC,OAAOI,KAAnB,IAkBXC,GAPUR,EAAAA,GAAAA,IAAH,uHAOSA,EAAAA,GAAAA,EAAH,qCACjB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,K,SC2BV,EAzDa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACXV,EADW,wDAEhBI,GAAU,GAFM,mBAIKO,EAAAA,EAAAA,IAAgBX,EAAS,YAJ9B,OAIRY,EAJQ,OAKdJ,EAAQI,EAAKL,MALC,kDAOdD,EAASO,EAAAA,IAPK,yBASdT,GAAU,GATI,6EAAH,qDAYfM,GACD,GAAE,CAACV,KAGF,gCACGG,IAAU,SAACW,EAAA,EAAD,KACN,OAAJP,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,QAAS,IACd,4BACE,SAACzB,EAAD,UAAa,UACb,SAACM,EAAD,iBACGW,QADH,IACGA,OADH,EACGA,EAAMS,KAAI,SAAAC,GACT,IAAQC,EAA6CD,EAA7CC,UAAWC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UACjCC,EAASH,EAAY,UACpBI,EAAAA,IADoB,OACPJ,G,qoHAEpB,OACE,UAACtB,EAAD,YACE,gBAAK2B,IAAKF,EAAQG,IAAKL,KACvB,uBAAIA,KACJ,uBAAIC,MAHOH,EAMhB,SAINX,EAAKQ,OAAS,IACb,SAAChB,EAAD,UAAe,qDAEhBM,IAAS,yBAAMA,MAGrB,C,4JCnDDqB,EAAAA,EAAAA,SAAAA,QAAyBC,EAAAA,GAElB,IAAMC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAUG,EAAAA,GAAmB,CAClDC,OAAQ,CACNC,QAASC,EAAAA,MAHY,cACnBC,EADmB,yBAMlBA,EAASrB,MANS,2CAAH,qDASXsB,EAAgB,mCAAG,WAAOC,EAAOC,EAAMC,GAApB,uFACPX,EAAAA,EAAAA,IAAUY,EAAAA,GAAwB,CACvDD,OAAAA,EACAP,OAAQ,CACNC,QAASC,EAAAA,GACTG,MAAOA,EACPC,KAAMA,KANoB,cACxBH,EADwB,yBASvBA,EAASrB,MATc,2CAAH,0DAYhBD,EAAe,mCAAG,WAAOX,EAASuC,EAASF,GAAzB,uFACNX,EAAAA,EAAAA,IAAA,UAAac,EAAAA,GAAb,YAA+BxC,GAA/B,OAAyCuC,GAAW,CACzEF,OAAAA,EACAP,OAAQ,CACNC,QAASC,EAAAA,MAJgB,cACvBC,EADuB,yBAOtBA,EAASrB,MAPa,2CAAH,yD,wMChCrB,IAAMe,EAAW,+BACXK,EAAU,mCACVH,EAAoB,sBACpBS,EAAyB,gBACzBE,EAAiB,SACjBjB,EAAa,mCACbV,EAAiB,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.jsx","services/constants.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const H2TitleCast = styled.h2`\n    color: ${p => p.theme.colors.white};\n    margin-bottom: 20px;\n`;\n\nexport const UlCast = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    grid-gap: 20px;\n`;\n\nexport const LiCast = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding-bottom: 10px;\n    align-items: center;\n    color: ${p => p.theme.colors.white};\n    background-color:${p => p.theme.colors.black};\n    & p {\n        padding: 0 5px;\n        line-height: 1.3;\n        text-align: center;\n    }\n    & p:last-child {\n        margin-top: auto;\n    }\n`;\n\nexport const ImgCast = styled.img`\n    width: 100%;\n    object-fit: cover;\n    object-position: top;\n    aspect-ratio: 3 / 4;\n`;\n\nexport const AvailableInfo = styled.p`\ncolor: ${p => p.theme.colors.white};\n`;","import { useParams } from 'react-router-dom';\nimport noPoster from '../../image/np.png';\nimport { useState, useEffect } from 'react';\nimport { getMovieDetails } from 'services/api';\nimport { HTTP_ERROR_MSG, POSTER_URL } from 'services/constants';\nimport Loader from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\nimport { AvailableInfo, H2TitleCast, LiCast, UlCast } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [loging, setLoging] = useState(false);\n  const [error, setError] = useState('');\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      if (!movieId) return;\n      setLoging(true);\n      try {\n        const data = await getMovieDetails(movieId, '/credits');\n        setCast(data.cast);\n      } catch (error) {\n        setError(HTTP_ERROR_MSG);\n      } finally {\n        setLoging(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loging && <Loader />}\n      {cast?.length > 0 && (\n        <div>\n          <H2TitleCast>Cast</H2TitleCast>\n          <UlCast>\n            {cast?.map(castData => {\n              const { credit_id, profile_path, name, character } = castData;\n              const poster = profile_path\n                ? `${POSTER_URL}${profile_path}`\n                : noPoster;\n              return (\n                <LiCast key={credit_id}>\n                  <img src={poster} alt={name} />\n                  <p>{name}</p>\n                  <p>{character}</p>\n                </LiCast>\n              );\n            })}\n          </UlCast>\n        </div>\n      )}\n      {cast.length < 1 && (\n        <AvailableInfo>Apologies, but no cast information is available.</AvailableInfo>\n      )}\n      {error && <div>{error}</div>}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport {\n  BASE_URL,\n  API_KEY,\n  TRENDING_ENDPOINT,\n  SEARCH_MOVIES_ENDPOINT,\n  MOVIE_ENDPOINT,\n} from './constants';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(TRENDING_ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMoviesByQuery = async (query, page, signal) => {\n  const response = await axios.get(SEARCH_MOVIES_ENDPOINT, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: page,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, details, signal) => {\n  const response = await axios.get(`${MOVIE_ENDPOINT}/${movieId}${details}`, {\n    signal,\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '7d691cb5b3405ae4ec9a5d6e389d01f2';\nexport const TRENDING_ENDPOINT = '/trending/movie/day';\nexport const SEARCH_MOVIES_ENDPOINT = '/search/movie';\nexport const MOVIE_ENDPOINT = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const HTTP_ERROR_MSG = 'Oops! Something went wrong! Try reloading the page!';\n"],"names":["H2TitleCast","styled","p","theme","colors","white","UlCast","LiCast","black","AvailableInfo","movieId","useParams","useState","loging","setLoging","error","setError","cast","setCast","useEffect","fetchCast","getMovieDetails","data","HTTP_ERROR_MSG","Loader","length","map","castData","credit_id","profile_path","name","character","poster","POSTER_URL","src","alt","axios","BASE_URL","getTrending","TRENDING_ENDPOINT","params","api_key","API_KEY","response","getMoviesByQuery","query","page","signal","SEARCH_MOVIES_ENDPOINT","details","MOVIE_ENDPOINT"],"sourceRoot":""}