{"version":3,"file":"static/js/415.0c052e9e.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","services/normalizedDataMovies.jsx","components/MovieList/MovieList.jsx","components/MovieList/MovieList.styled.jsx","pages/Home.jsx","services/api.jsx","services/constants.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import noPoster from '../image/no-poster.jpg';\nimport { POSTER_URL } from './constants';\n\nconst normalizeMoviesData = (data) => {\n  return data.map(({\n    id,\n    title,\n    original_title,\n    name,\n    original_name,\n    poster_path\n  }) => {\n    const movieTitle = name || title || original_name || original_title;\n    const poster = poster_path ? `${POSTER_URL}${poster_path}` : noPoster;\n\n    return {\n      id,\n      movieTitle,\n      poster\n    };\n  });\n};\n\nexport default normalizeMoviesData;\n","import { nanoid } from 'nanoid';\nimport { useLocation } from 'react-router-dom';\nimport normalizeMoviesData from 'services/normalizedDataMovies';\nimport PropTypes from 'prop-types';\nimport { DivTitle, ImgContainer, LiGridItem, MovieLink, MovieTitle, UlGrid } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  const data = normalizeMoviesData(movies);\n\n  return (\n    <UlGrid>\n      {data.map(({ id, movieTitle, poster }) => (\n        <LiGridItem key={nanoid()}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            <ImgContainer>\n              <img src={poster} alt={movieTitle} />\n              <DivTitle className=\"js-overlay\">\n                <MovieTitle>{movieTitle}</MovieTitle>\n              </DivTitle>\n            </ImgContainer>\n          </MovieLink>\n        </LiGridItem>\n      ))}\n    </UlGrid>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      movieTitle: PropTypes.string,\n      poster: PropTypes.string,\n    }),\n  ).isRequired\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const UlGrid = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const LiGridItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  background-color: ${p => p.theme.colors.accent};\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  overflow: hidden;\n  cursor: zoom-in;\n\n  overflow: hidden;\n  cursor: zoom-in;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 10px 2px #1a0004;\n  }\n  &:hover img,\n  &:focus img {\n    transform: scale(1.05);\n  }\n  &:hover .js-overlay,\n  &:focus .js-overlay {\n    justify-content: center;\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nexport const ImgContainer = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  & img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: block;\n  flex-grow: 1;\n`;\n\nexport const DivTitle = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 20%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  gap: 20px;\n  padding: 20px;\n  background-color: ${p => p.theme.colors.bgdWrapper};\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  ${/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  )\n    ? 'transform: translateY(0); opacity: 1;'\n    : 'transform: translateY(100%); opacity: 0;'}\n`;\n\nexport const MovieTitle = styled.h3`\n  text-align: center;\n  padding: 4px 10px;\n  font-size: 15px;\n  color: ${p => p.theme.colors.white};\n`;\n\nexport const TitleTrending = styled.h1`\npadding: 15px;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\ncolor: ${p => p.theme.colors.black};\ntext-shadow: 2px 2px 4px rgba(182, 179, 179, 0.5);\n`;","import Loader from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport { TitleTrending } from 'components/MovieList/MovieList.styled';\nimport { useState, useEffect } from 'react';\nimport { getTrending } from 'services/api';\nimport { HTTP_ERROR_MSG } from 'services/constants';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchTrendingMovies = async () => {\n      setLoading(true);\n      try {\n        const data = await getTrending({\n          signal: controller.signal,\n        });\n        setMovies(data.results);\n      } catch (error) {\n        setError(HTTP_ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTrendingMovies();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return (\n    <main>\n      {loading && <Loader />}\n      <TitleTrending>Trending today</TitleTrending>\n      <MovieList movies={movies} />\n      {error && <div>{error}</div>}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport {\n  BASE_URL,\n  API_KEY,\n  TRENDING_ENDPOINT,\n  SEARCH_MOVIES_ENDPOINT,\n  MOVIE_ENDPOINT,\n} from './constants';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  const response = await axios.get(TRENDING_ENDPOINT, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMoviesByQuery = async (query, page, signal) => {\n  const response = await axios.get(SEARCH_MOVIES_ENDPOINT, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      query: query,\n      page: page,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, details, signal) => {\n  const response = await axios.get(`${MOVIE_ENDPOINT}/${movieId}${details}`, {\n    signal,\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '7d691cb5b3405ae4ec9a5d6e389d01f2';\nexport const TRENDING_ENDPOINT = '/trending/movie/day';\nexport const SEARCH_MOVIES_ENDPOINT = '/search/movie';\nexport const MOVIE_ENDPOINT = '/movie';\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const HTTP_ERROR_MSG = 'Oops! Something went wrong! Try reloading the page!';\n"],"names":["data","map","id","title","original_title","name","original_name","poster_path","movieTitle","poster","POSTER_URL","noPoster","movies","location","useLocation","normalizeMoviesData","to","state","from","src","alt","className","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","UlGrid","styled","LiGridItem","p","theme","colors","accent","ImgContainer","MovieLink","Link","DivTitle","bgdWrapper","test","navigator","userAgent","MovieTitle","white","TitleTrending","black","useState","setMovies","loading","setLoading","error","setError","useEffect","controller","AbortController","fetchTrendingMovies","getTrending","signal","results","HTTP_ERROR_MSG","abort","axios","BASE_URL","TRENDING_ENDPOINT","params","api_key","API_KEY","response","getMoviesByQuery","query","page","SEARCH_MOVIES_ENDPOINT","getMovieDetails","movieId","details","MOVIE_ENDPOINT"],"sourceRoot":""}